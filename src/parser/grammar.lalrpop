use parser::ast;
use std::str::FromStr;

grammar;

pub Command: ast::Command = {
    <first:SimpleCommand> <connector:Connector> <second:Command> => ast::Command::Connection {
        first: Box::new(first),
        second: Box::new(second),
        connector,
    },
    SimpleCommand
};

Connector: ast::Connector = {
    "|" => ast::Connector::Pipe,
    ";" => ast::Connector::Semicolon,
};

SimpleCommand: ast::Command = {
    <cmdparts:SimpleCommandPart+> <background:"&"?> => {
        cmdparts.into_iter().fold(ast::SimpleCommandBuilder::new(background.is_some()), |acc, x| {
            acc.update(x)
        })
        .build()
    },
};

SimpleCommandPart: ast::SimpleCommandPart = {
    <Word> => ast::SimpleCommandPart::Word(<>),
    <Redirect> => ast::SimpleCommandPart::Redirect(<>),
};

Redirect: ast::Redirect = {
    "<" <Redirectee> => ast::Redirect {
        redirector: None,
        instruction: ast::RedirectInstruction::Input,
        redirectee: <>
    },
    ">" <redirectee:Redirectee> => ast::Redirect {
        redirector: None,
        instruction: ast::RedirectInstruction::Output,
        redirectee: redirectee,
    },
    <input_fd:RedirectorFd> <redirectee:Redirectee> => ast::Redirect {
        redirector: Some(ast::Redirectee::Dest(i32::from_str(&input_fd[..input_fd.len()-1]).unwrap())),
        instruction: ast::RedirectInstruction::Output,
        redirectee: redirectee,
    },
};

Redirectee: ast::Redirectee = {
    <Word> => ast::Redirectee::Filename(<>),
    <RedirecteeFd> => ast::Redirectee::Dest(i32::from_str(&<>[1..]).unwrap()),
};

match {
    r"\d+>" => RedirectorFd,
    r"&\d+" => RedirecteeFd,
} else {
    _
}

Word: String = {
    r#"[^|;<>&\s'"]+"# => <>.to_string(),
    r#"'[^']+'"# => <>[1..<>.len()-1].to_string(),
    r#""[^"]+""# => <>[1..<>.len()-1].to_string(),
};

// vim: ft=rust
